#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
#define MAX_TEXT_LENGTH 1000
#define TOP_N 10
void frequencyAnalysis(const char *ciphertext, int *letterFreq);
void generatePlaintexts(const char *ciphertext, char plaintexts[][MAX_TEXT_LENGTH], int *scores, int *numPlaintexts);
void printTopPlaintexts(char plaintexts[][MAX_TEXT_LENGTH], int *scores, int numPlaintexts, int topN);
void sortAndPrintTopPlaintexts(char plaintexts[][MAX_TEXT_LENGTH], int *scores, int numPlaintexts, int topN);
int main() {
    char ciphertext[MAX_TEXT_LENGTH];
    char plaintexts[ALPHABET_SIZE][MAX_TEXT_LENGTH];
    int letterFreq[ALPHABET_SIZE] = {0};
    int numPlaintexts = 0;
    int scores[ALPHABET_SIZE];
    int topN = TOP_N;
    printf("Enter the ciphertext: ");
    fgets(ciphertext, MAX_TEXT_LENGTH, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  
    frequencyAnalysis(ciphertext, letterFreq);
    generatePlaintexts(ciphertext, plaintexts, scores, &numPlaintexts);
    sortAndPrintTopPlaintexts(plaintexts, scores, numPlaintexts, topN);

    return 0;
}
void frequencyAnalysis(const char *ciphertext, int *letterFreq) {
    int length = strlen(ciphertext);
    for (int i = 0; i < length; i++) {
        if (isalpha(ciphertext[i])) {
            int index = tolower(ciphertext[i]) - 'a';
            letterFreq[index]++;
        }
    }
}

void generatePlaintexts(const char *ciphertext, char plaintexts[][MAX_TEXT_LENGTH], int *scores, int *numPlaintexts) {
    int length = strlen(ciphertext);
    int letterFreq[ALPHABET_SIZE] = {0};
    frequencyAnalysis(ciphertext, letterFreq);
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        scores[i] = 0;
        for (int j = 0; j < length; j++) {
            if (isalpha(ciphertext[j])) {
                int shift = (tolower(ciphertext[j]) - 'a' + i) % ALPHABET_SIZE;
                plaintexts[i][j] = shift + 'a';
            } else {
                plaintexts[i][j] = ciphertext[j];
            }
        }
        plaintexts[i][length] = '\0'; 
    }
    *numPlaintexts = ALPHABET_SIZE;
}
void sortAndPrintTopPlaintexts(char plaintexts[][MAX_TEXT_LENGTH], int *scores, int numPlaintexts, int topN) {
    for (int i = 0; i < numPlaintexts - 1; i++) {
        for (int j = i + 1; j < numPlaintexts; j++) {
            if (scores[i] < scores[j]) {
                int tempScore = scores[i];
                scores[i] = scores[j];
                scores[j] = tempScore;
                char tempPlaintext[MAX_TEXT_LENGTH];
                strcpy(tempPlaintext, plaintexts[i]);
                strcpy(plaintexts[i], plaintexts[j]);
                strcpy(plaintexts[j], tempPlaintext);
            }
        }
    }
    printf("\nTop %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN && i < numPlaintexts; i++) {
        printf("Score: %d - Plaintext: %s\n", scores[i], plaintexts[i]);
    }
}
