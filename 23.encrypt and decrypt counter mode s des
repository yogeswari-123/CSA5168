#include <stdio.h>
#include <stdint.h>
#define BLOCK_SIZE 8 
#define KEY_SIZE 10  
uint8_t generate_round_key(uint16_t key) {
}
uint8_t sdes_encrypt(uint8_t input, uint8_t round_key) {
    return input ^ round_key;
}
uint8_t sdes_decrypt(uint8_t input, uint8_t round_key) {
    return input ^ round_key;
}
void ctr_encrypt(uint8_t *plaintext, int length, uint16_t key, uint8_t counter, uint8_t *ciphertext) {
    uint8_t round_key = generate_round_key(key);

    for (int i = 0; i < length; i++) {
        uint8_t encrypted_counter = sdes_encrypt(counter, round_key);
        ciphertext[i] = plaintext[i] ^ encrypted_counter;
        
        counter++;
    }
}
void ctr_decrypt(uint8_t *ciphertext, int length, uint16_t key, uint8_t counter, uint8_t *plaintext) {
    uint8_t round_key = generate_round_key(key); 

    for (int i = 0; i < length; i++) {
        uint8_t encrypted_counter = sdes_encrypt(counter, round_key);
        plaintext[i] = ciphertext[i] ^ encrypted_counter;
        counter++;
    }
}

int main() {
    uint8_t plaintext[] = {0x01, 0x02, 0x04}; 
    int plaintext_length = sizeof(plaintext) / sizeof(plaintext[0]);
    uint16_t key = 0x1FD; 
    uint8_t counter = 0x00; 
    uint8_t ciphertext[plaintext_length];
    uint8_t decrypted_text[plaintext_length];
    ctr_encrypt(plaintext, plaintext_length, key, counter, ciphertext);
    printf("Ciphertext (CTR Mode):\n");
    for (int i = 0; i < plaintext_length; i++) {
        printf("%02X ", ciphertext[i]);
    }
    printf("\n");
    ctr_decrypt(ciphertext, plaintext_length, key, counter, decrypted_text);
    printf("Decrypted Text (CTR Mode):\n");
    for (int i = 0; i < plaintext_length; i++) {
        printf("%02X ", decrypted_text[i]);
    }
    printf("\n");

    return 0;
}
