#include <stdio.h>
#include <stdint.h>
#include <string.h>
#define STATE_SIZE 200  
#define RATE_SIZE  128 
#define CAPACITY_SIZE (STATE_SIZE - RATE_SIZE)  

void initialize_state(uint8_t state[STATE_SIZE]) {
    memset(state, 0, STATE_SIZE); 
}

void process_message_block(uint8_t state[STATE_SIZE], const uint8_t message_block[RATE_SIZE]) {
    memcpy(state, message_block, RATE_SIZE);
}

int all_capacity_lanes_nonzero(uint8_t state[STATE_SIZE]) {
    for (int i = RATE_SIZE; i < STATE_SIZE; i++) {
        if (state[i] != 0) {
            return 1; 
        }
    }
    return 0; 
}

int main() {
    uint8_t state[STATE_SIZE];
    uint8_t message_block[RATE_SIZE] = {0x01}; 
    
    
    initialize_state(state);
    

    process_message_block(state, message_block);
    
    int steps = 0;
    while (!all_capacity_lanes_nonzero(state)) {
        
        steps++;
        message_block[0] = (message_block[0] + 1) % 256;
        process_message_block(state, message_block);
        if (steps > 1000) {
            printf("Did not reach a state where all capacity lanes have at least one nonzero bit.\n");
            return 1;
        }
    }
    printf("All capacity lanes have at least one nonzero bit after %d steps.\n", steps);
    return 0;
}
