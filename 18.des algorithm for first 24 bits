#include <stdio.h>
#include <stdint.h>
void generateKeys(uint64_t key, uint64_t keys[16]);
uint64_t permute(uint64_t input, const int* table, int size);
uint64_t des_encrypt(uint64_t plaintext, uint64_t keys[16]);
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4
};
int PC2[] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};
int shifts[] = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };
uint64_t permute(uint64_t input, const int* table, int size) {
    uint64_t output = 0;
    for (int i = 0; i < size; i++) {
        output <<= 1;
        output |= (input >> (64 - table[i])) & 1;
    }
    return output;
}
void generateKeys(uint64_t key, uint64_t keys[16]) {
    uint64_t permutedKey = permute(key, PC1, 56); 
    uint32_t C = (permutedKey >> 28) & 0xFFFFFFF;  
    uint32_t D = permutedKey & 0xFFFFFFF;          

    for (int i = 0; i < 16; i++) {
        C = ((C << shifts[i]) | (C >> (28 - shifts[i]))) & 0xFFFFFFF;
        D = ((D << shifts[i]) | (D >> (28 - shifts[i]))) & 0xFFFFFFF;
        uint64_t combined = ((uint64_t)C << 28) | D;
        keys[i] = permute(combined, PC2, 48);
    }
}
uint64_t des_encrypt(uint64_t plaintext, uint64_t keys[16]) {
    for (int i = 0; i < 16; i++) {
        printf("Subkey %d: %012llX\n", i + 1, keys[i]);
    }
    return plaintext;
}

int main() {
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t keys[16];
    generateKeys(key, keys);
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t ciphertext = des_encrypt(plaintext, keys);
    printf("Ciphertext: %016llX\n", ciphertext);

    return 0;
}
