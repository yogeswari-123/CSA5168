#include <stdio.h>
#include <stdint.h>

#define BLOCK_SIZE 64
#define KEY_SIZE 56
#define NUM_ROUNDS 16

int IP[64] = { 
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};
int FP[64] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};
int E[48] = { 
    32, 1, 2, 3, 4, 5, 4, 5,
    6, 7, 8, 9, 8, 9, 10, 11,
    12, 13, 12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21, 20, 21,
    22, 23, 24, 25, 24, 25, 26, 27,
    28, 29, 28, 29, 30, 31, 32, 1 
};
int S_BOX[8][4][16] = { /* S1 - S8 boxes defined here */ };
int P[32] = { 
    16, 7, 20, 21, 29, 12, 28, 17,
    1, 15, 23, 26, 5, 18, 31, 10,
    2, 8, 24, 14, 32, 27, 3, 9,
    19, 13, 30, 6, 22, 11, 4, 25
};

int PC1[56] = { 
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4 
};

int PC2[48] = { 
    14, 17, 11, 24, 1, 5, 3, 28,
    15, 6, 21, 10, 23, 19, 12, 4,
    26, 8, 16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55, 30, 40,
    51, 45, 33, 48, 44, 49, 39, 56,
    34, 53, 46, 42, 50, 36, 29, 32 
};

int key_shifts[16] = { 
    1, 1, 2, 2, 2, 2, 2, 2, 
    1, 2, 2, 2, 2, 2, 2, 1 
};

void print_block(uint64_t block, int size) {
    for (int i = size - 1; i >= 0; i--) {
        printf("%d", (block >> i) & 1);
    }
    printf("\n");
}

uint64_t permute(uint64_t block, const int *table, int size) {
    uint64_t permuted_block = 0;
    for (int i = 0; i < size; i++) {
        permuted_block <<= 1;
        permuted_block |= (block >> (64 - table[i])) & 1;
    }
    return permuted_block;
}
uint64_t des(uint64_t block, uint64_t key, int mode) {
    uint64_t permuted_block = permute(block, IP, 64);

    uint32_t left = (permuted_block >> 32) & 0xFFFFFFFF;
    uint32_t right = permuted_block & 0xFFFFFFFF;

    uint64_t subkeys[NUM_ROUNDS];

    for (int round = 0; round < NUM_ROUNDS; round++) {
        
    }
    for (int round = 0; round < NUM_ROUNDS; round++) {
        uint32_t prev_right = right;
      
        right = left ;
        left = prev_right;
    }

    uint64_t combined_block = ((uint64_t)right << 32) | left;
    return permute(combined_block, FP, 64);
}

int main() {
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t key = 0x133457799BBCDFF1;

    printf("Plaintext: ");
    print_block(plaintext, 64);

  
    uint64_t ciphertext = des(plaintext, key, 1);
    printf("Ciphertext: ");
    print_block(ciphertext, 64);

    
    uint64_t decrypted = des(ciphertext, key, 0);
    printf("Decrypted text: ");
    print_block(decrypted, 64);

    return 0;
}
